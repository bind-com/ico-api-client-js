/* tslint:disable */
/* eslint-disable */
/**
 * BIND ICO portal API
 * Description for BIND. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bind.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BaseUser } from '../models';
import { PatchUser } from '../models';
import { User } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all info about current User
         * @summary Info about current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Info about user user by referral code
         * @summary Info about user by referral code
         * @param {string} referral_code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByReferralCode: async (referral_code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referral_code' is not null or undefined
            if (referral_code === null || referral_code === undefined) {
                throw new RequiredError('referral_code','Required parameter referral_code was null or undefined when calling getUserByReferralCode.');
            }
            const localVarPath = `/user/by_referral_code/{referral_code}`
                .replace(`{${"referral_code"}}`, encodeURIComponent(String(referral_code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Set first name, last name, middle name, currency or referral code of a user
         * @summary Edit current User model fields
         * @param {PatchUser} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patch: async (body?: PatchUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all info about current User
         * @summary Info about current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<User>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).get(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Info about user user by referral code
         * @summary Info about user by referral code
         * @param {string} referral_code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByReferralCode(referral_code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BaseUser>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getUserByReferralCode(referral_code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set first name, last name, middle name, currency or referral code of a user
         * @summary Edit current User model fields
         * @param {PatchUser} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patch(body?: PatchUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PatchUser>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).patch(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get all info about current User
         * @summary Info about current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(options?: AxiosRequestConfig): Promise<AxiosResponse<User>> {
            return UserApiFp(configuration).get(options).then((request) => request(axios, basePath));
        },
        /**
         * Info about user user by referral code
         * @summary Info about user by referral code
         * @param {string} referral_code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByReferralCode(referral_code: string, options?: AxiosRequestConfig): Promise<AxiosResponse<BaseUser>> {
            return UserApiFp(configuration).getUserByReferralCode(referral_code, options).then((request) => request(axios, basePath));
        },
        /**
         * Set first name, last name, middle name, currency or referral code of a user
         * @summary Edit current User model fields
         * @param {PatchUser} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patch(body?: PatchUser, options?: AxiosRequestConfig): Promise<AxiosResponse<PatchUser>> {
            return UserApiFp(configuration).patch(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Get all info about current User
     * @summary Info about current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async get(options?: AxiosRequestConfig) : Promise<AxiosResponse<User>> {
        return UserApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Info about user user by referral code
     * @summary Info about user by referral code
     * @param {string} referral_code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async getUserByReferralCode(referral_code: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<BaseUser>> {
        return UserApiFp(this.configuration).getUserByReferralCode(referral_code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Set first name, last name, middle name, currency or referral code of a user
     * @summary Edit current User model fields
     * @param {PatchUser} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public async patch(body?: PatchUser, options?: AxiosRequestConfig) : Promise<AxiosResponse<PatchUser>> {
        return UserApiFp(this.configuration).patch(body, options).then((request) => request(this.axios, this.basePath));
    }
}
